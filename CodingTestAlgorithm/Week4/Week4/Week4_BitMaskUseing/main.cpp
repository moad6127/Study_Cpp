#include <bits/stdc++.h>
using namespace std;

//
//
// 비트연산자 활용법
// 
// 1. index 비트 끄기
// 
// idx 번째 비트 끄기 =>  S &= ~(1<<idx)
// 
// 10010의 2진수값이 있을경우 1번째 비트를 false를 만들기 위해서는 
// 
// 11101의값과 &연산을 하게되면 1번째 비트를 종료시킬수 있다.
// 즉 비트를 끄기위해서는 ~(1<<idx)값을 & 연산을 사용하면 종료할수 있다.
// 
// ex
//int main()
//{
//	int S = 18; // 10010;
//	int idx = 1;
//	S &= ~(1 << idx);
//	cout << S << '\n'; // 16이 나온다 (10000)
//
//}
//
// 
// 2. idx번째 비트 XOR연산 (0은 1로, 1은 0으로)(토글)
// 
// S ^=(1<<idx) 의 방식으로 하면 토글된다.
//
//
//int main()
//{
//	int S = 18;
//	int idx = 1;
//	S ^= (1 << idx);
//	cout << S << '\n'; // 16이 된다.
//}
// 
// 10010 의 0번째를 바꾸고 싶을때
// 00001 과 XOR연산을 하면
// 10011이 되면서 0번째 값만 바뀌게 된다.
// (XOR연산은 값이 다를때만 1 값이 같으면 0이 된다.)
// 
// 
// 3. 최하위 켜져있는 비트 찾기
// 
// 10010 에서 최하위 켜져있는 비트는 가장오른쪽에 있는 1이 최하위 비트이다.
// 
// idx = ( S & -S) 의 방식을 사용하면 최하위 비트를 찾을수 있다.
// 
// S 가 10010이고 -S = ~S+1이므로 01110이 된다. 
// 이때 & 연산을 하게되면 가장 최하위비트의 인덱스를 알수 있게 된다.
// 
// 
//int main()
//{
//	int S = 18;
//	int idx = (S & -S);
//	cout << idx << '\n';
//}
// 
// 4.크기가 n인 집합의 모든비트 켜기
// 
// 크기가 n인 집합에 대해서 모든 비트를 키는 방법은 다음과 같다.
// 
// (1<<n) - 1
// 
// 
//int main()
//{
//	int n = 4;
//	cout << (1 << n) - 1 << '\n'; // 15가 나온다. 이진수로 하면 1111이 된다.
// 
//}
// 
// 5. idx번째 비트 켜기
// 
// idx번째의 비트를 키고 싶을때는 다음과 같은 방식을 사용하면 된다.
// 
// S |= (1<<idx)
// 
// 10010 에서 0번째 비트를 키고싶을때는
// 00001과 OR연산을 하면 된다.
// 10011의 값이 나오게 된다.
//int main()
//{
//	int S = 18; //10010
//	int idx = 0; //00001
//	S |= (1 << idx); //OR연산
//	cout << S << '\n';  //10011
//}
// 
// 6. idx번째 비트가 켜져있는지 확인하기.
// 
// idx번째 비트가 켜져있는지 확인하기 위해서는 다음과 같은 방법을 사용하면 된다.
// 
// if(S & (1<<idx))
// 
//int main()
//{
//	int S = 18;
//	int idx = 4;
//	if (S & (1 << idx))
//	{
//		cout << "해당 idx : " << idx << "가 켜져있습니다.";
//	}
//	else
//	{
//		cout << "해당 idx : " << idx << "가 꺼져있습니다.";
//	}
//}
// 
// 
// 비트마스킹의 경우의수, 매개변수
// 
// bool역할을 하는 하나의 수를 정해서 비트연산자를 통해서 탐색,수정하는것을 비트마스킹이라고 한다.
// 
// 경우의수 체크하기
//int main()
//{

//	for (int i = 0; i < (1 << n); i++)
//	{
//		string result = "";
//		for (int j = 0; j < n; j++)
//		{
//			if (i & (1 << j))
//			{
//				result += (a[j] + " ");
//			}
//		}
//		cout << result << '\n';
//	}
//
//}
// 
//
// 
//
