#include <bits/stdc++.h>
using namespace std;

//
//
// 비트연산자 활용법
// 
// 1. index 비트 끄기
// 
// idx 번째 비트 끄기 =>  S &= ~(1<<idx)
// 
// 10010의 2진수값이 있을경우 1번째 비트를 false를 만들기 위해서는 
// 
// 11101의값과 &연산을 하게되면 1번째 비트를 종료시킬수 있다.
// 즉 비트를 끄기위해서는 ~(1<<idx)값을 & 연산을 사용하면 종료할수 있다.
// 
// ex
//int main()
//{
//	int S = 18; // 10010;
//	int idx = 1;
//	S &= ~(1 << idx);
//	cout << S << '\n'; // 16이 나온다 (10000)
//
//}
//
// 
// 2. idx번째 비트 XOR연산 (0은 1로, 1은 0으로)(토글)
// 
// S ^=(1<<idx) 의 방식으로 하면 토글된다.
//
//
//int main()
//{
//	int S = 18;
//	int idx = 1;
//	S ^= (1 << idx);
//	cout << S << '\n'; // 16이 된다.
//}
// 
// 10010 의 0번째를 바꾸고 싶을때
// 00001 과 XOR연산을 하면
// 10011이 되면서 0번째 값만 바뀌게 된다.
// (XOR연산은 값이 다를때만 1 값이 같으면 0이 된다.)
// 
// 
// 3. 최하위 켜져있는 비트 찾기
// 
// 10010 에서 최하위 켜져있는 비트는 가장오른쪽에 있는 1이 최하위 비트이다.
// 
// idx = ( S & -S) 의 방식을 사용하면 최하위 비트를 찾을수 있다.
// 
// S 가 10010이고 -S = ~S+1이므로 01110이 된다. 
// 이때 & 연산을 하게되면 가장 최하위비트의 인덱스를 알수 있게 된다.
// 
// 
//int main()
//{
//	int S = 18;
//	int idx = (S & -S);
//	cout << idx << '\n';
//}
// 
// 
//
